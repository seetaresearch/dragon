#include "dragon/kernels/training/op_kernels.h"
#include "dragon/utils/math_functions.h"

namespace dragon {

namespace kernels {

namespace {

#define BLOCK_THREADS 40960

template <typename T, typename CopyT>
__mlu_entry__ void _Adam(
    const int N,
    const T lr,
    const T beta1,
    const T beta2,
    const T eps,
    const T wd,
    const T* x,
    const T* g,
    T* m,
    T* v,
    T* y,
    CopyT* y_copy) {
  __nram__ T X[BLOCK_THREADS], Y[BLOCK_THREADS];
  __nram__ T scratch[BLOCK_THREADS];
  MLU_1D_KERNEL_LOOP(i, N, BLOCK_THREADS) {
    const int N_ram = std::min(N - i, BLOCK_THREADS);
    __memcpy(Y, g + i, N_ram * sizeof(T), GDRAM2NRAM);
    if (wd > T(0)) {
      __memcpy(scratch, x + i, N_ram * sizeof(T), GDRAM2NRAM);
      __bang_fusion(FUSION_FMA, Y, scratch, wd, Y, N_ram, N_ram);
    }
    // Update "v".
    __bang_square(X, Y, N_ram);
    __bang_mul_scalar(X, X, T(1) - beta2, N_ram);
    __memcpy(scratch, v + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, X, scratch, beta2, X, N_ram, N_ram);
    __memcpy(v + i, X, N_ram * sizeof(T), NRAM2GDRAM);
    __bang_active_sqrthp(X, X, N_ram);
    __bang_add_scalar(X, X, eps, N_ram);
    __bang_active_reciphp(X, X, N_ram);
    // Update "m".
    __bang_mul_scalar(Y, Y, T(1) - beta1, N_ram);
    __memcpy(scratch, m + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, Y, scratch, beta1, Y, N_ram, N_ram);
    __memcpy(m + i, Y, N_ram * sizeof(T), NRAM2GDRAM);
    // Update "y".
    __bang_mul(Y, Y, X, N_ram);
    __memcpy(scratch, y + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, Y, Y, -lr, scratch, N_ram, N_ram);
    __memcpy(y + i, Y, N_ram * sizeof(T), NRAM2GDRAM);
    // Update "y_copy".
    if (y_copy != nullptr) {
      math::utils::Convert((CopyT*)scratch, Y, N_ram);
      __memcpy(y_copy + i, scratch, N_ram * sizeof(CopyT), NRAM2GDRAM);
    }
  }
}

template <typename T, typename CopyT>
__mlu_entry__ void _AdamW(
    const int N,
    const T lr,
    const T beta1,
    const T beta2,
    const T eps,
    const T wd,
    const T* x,
    const T* g,
    T* m,
    T* v,
    T* y,
    CopyT* y_copy) {
  __nram__ T X[BLOCK_THREADS], Y[BLOCK_THREADS];
  __nram__ T scratch[BLOCK_THREADS];
  MLU_1D_KERNEL_LOOP(i, N, BLOCK_THREADS) {
    const int N_ram = std::min(N - i, BLOCK_THREADS);
    __memcpy(Y, g + i, N_ram * sizeof(T), GDRAM2NRAM);
    // Update "v".
    __bang_square(X, Y, N_ram);
    __bang_mul_scalar(X, X, T(1) - beta2, N_ram);
    __memcpy(scratch, v + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, X, scratch, beta2, X, N_ram, N_ram);
    __memcpy(v + i, X, N_ram * sizeof(T), NRAM2GDRAM);
    __bang_active_sqrthp(X, X, N_ram);
    __bang_add_scalar(X, X, eps, N_ram);
    __bang_active_reciphp(X, X, N_ram);
    // Update "m".
    __bang_mul_scalar(Y, Y, T(1) - beta1, N_ram);
    __memcpy(scratch, m + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, Y, scratch, beta1, Y, N_ram, N_ram);
    __memcpy(m + i, Y, N_ram * sizeof(T), NRAM2GDRAM);
    // Update "y".
    __bang_mul(Y, Y, X, N_ram);
    if (wd > T(0)) {
      __memcpy(scratch, x + i, N_ram * sizeof(T), GDRAM2NRAM);
      __bang_fusion(FUSION_FMA, Y, scratch, wd / lr, Y, N_ram, N_ram);
    }
    __memcpy(scratch, y + i, N_ram * sizeof(T), GDRAM2NRAM);
    __bang_fusion(FUSION_FMA, Y, Y, -lr, scratch, N_ram, N_ram);
    __memcpy(y + i, Y, N_ram * sizeof(T), NRAM2GDRAM);
    // Update "y_copy".
    if (y_copy != nullptr) {
      math::utils::Convert((CopyT*)scratch, Y, N_ram);
      __memcpy(y_copy + i, scratch, N_ram * sizeof(CopyT), NRAM2GDRAM);
    }
  }
}

} // namespace

#define DEFINE_KERNEL_LAUNCHER(name, T, CopyT)                     \
  template <>                                                      \
  void name<T, CopyT, MLUContext>(                                 \
      const int N,                                                 \
      const float lr,                                              \
      const float beta1,                                           \
      const float beta2,                                           \
      const float eps,                                             \
      const float wd,                                              \
      const T* x,                                                  \
      const T* g,                                                  \
      T* m,                                                        \
      T* v,                                                        \
      T* y,                                                        \
      CopyT* y_copy,                                               \
      MLUContext* ctx) {                                           \
    _##name<<<                                                     \
        MLU_BLOCKS(N, BLOCK_THREADS),                              \
        CNRT_FUNC_TYPE_BLOCK,                                      \
        ctx->mlu_stream()>>>(                                      \
        N,                                                         \
        T(lr),                                                     \
        T(beta1),                                                  \
        T(beta2),                                                  \
        T(eps),                                                    \
        T(wd),                                                     \
        x,                                                         \
        g,                                                         \
        m,                                                         \
        v,                                                         \
        y,                                                         \
        reinterpret_cast<math::ScalarType<CopyT>::type*>(y_copy)); \
  }

DEFINE_KERNEL_LAUNCHER(Adam, float, float16);
DEFINE_KERNEL_LAUNCHER(Adam, float, float);
DEFINE_KERNEL_LAUNCHER(AdamW, float, float16);
DEFINE_KERNEL_LAUNCHER(AdamW, float, float);
#undef DEFINE_KERNEL_LAUNCHER

#define DEFINE_KERNEL_LAUNCHER(name, T, CopyT)                           \
  template <>                                                            \
  void name<T, CopyT, MLUContext>(                                       \
      const int N,                                                       \
      const float lr,                                                    \
      const float beta1,                                                 \
      const float beta2,                                                 \
      const float eps,                                                   \
      const float wd,                                                    \
      const T* x,                                                        \
      const T* g,                                                        \
      T* m,                                                              \
      T* v,                                                              \
      T* y,                                                              \
      CopyT* y_copy,                                                     \
      MLUContext* ctx) {                                                 \
    LOG(FATAL) << "Unsupported BANG type for <" << #name                 \
               << "Kernel>: " << dtypes::to_string(TypeMeta::Make<T>()); \
  }

DEFINE_KERNEL_LAUNCHER(Adam, double, double);
DEFINE_KERNEL_LAUNCHER(AdamW, double, double);
#undef DEFINE_KERNEL_LAUNCHER
#undef BLOCK_THREADS

} // namespace kernels

} // namespace dragon
