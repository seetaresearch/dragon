# ---[ Settings
set(BUILD_RUNTIME OFF)
message(STATUS "Build module: ${CMAKE_CURRENT_LIST_DIR}")

# ---[ Sources
file(GLOB PYBIND_SOURCES *.cc)
add_subdirectory(${PROJECT_SOURCE_DIR}/core core)
add_subdirectory(${PROJECT_SOURCE_DIR}/kernels kernels)
add_subdirectory(${PROJECT_SOURCE_DIR}/onnx onnx)
add_subdirectory(${PROJECT_SOURCE_DIR}/operators operators)
add_subdirectory(${PROJECT_SOURCE_DIR}/proto proto)
add_subdirectory(${PROJECT_SOURCE_DIR}/utils utils)

# ---[ Targets
if (USE_CUDA)
  cuda_add_library(dragon ${MODULE_SOURCES} ${MODULE_CUDA_SOURCES})
else()
  add_library(dragon ${MODULE_SOURCES})
endif()
add_library(dragon_python ${PYBIND_SOURCES})
add_dependencies(dragon_python dragon)

# ---[ Target defines
if (MSVC)
  target_compile_definitions(dragon_python PRIVATE "DRAGON_API=__declspec(dllimport)")
  if (BUILD_SHARED_LIBS)
    target_compile_definitions(dragon PRIVATE "DRAGON_API=__declspec(dllexport)")
  else()
    target_compile_definitions(dragon PRIVATE "DRAGON_API=")
  endif()
else()
  target_compile_definitions(dragon PRIVATE "DRAGON_API=")
  target_compile_definitions(dragon_python PRIVATE "DRAGON_API=")
endif()

# ---[ Target settings
set(_install_rpath ${RPATH_PORTABLE_ORIGIN})
if (USE_SHARED_LIBS)
  set(_install_rpath ${_install_rpath} ${THIRD_PARTY_LIBRARY_DIRS})
endif()
set_target_properties(dragon PROPERTIES INSTALL_RPATH "${_install_rpath}")
set_target_properties(dragon_python PROPERTIES INSTALL_RPATH "${_install_rpath}")
if (APPLE)
  # Fix the issue when binding python on OSX
  set_target_properties(dragon_python PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif()

# ---[ Linker
target_link_libraries(dragon_python dragon)
target_link_libraries_v2(dragon protobuf)
if (USE_OPENMP)
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_link_libraries_v2(dragon omp)
  endif()
endif()
if (USE_CUDA)
  if (USE_SHARED_LIBS)
    target_link_libraries_v2(dragon ${CUDA_LIBRARIES_SHARED})
  else()
    target_link_libraries_v2(dragon ${CUDA_LIBRARIES_STATIC})
  endif()
endif()
if (USE_CUDNN)
  if (USE_SHARED_LIBS)
    target_link_libraries_v2(dragon ${CUDNN_LIBRARIES_SHARED})
  else()
    target_link_libraries_v2(
      dragon_python -Wl,--whole-archive
      ${CUDNN_LIBRARIES_STATIC} -Wl,--no-whole-archive)
  endif()
endif()
if (USE_NCCL)
  if (USE_SHARED_LIBS)
    target_link_libraries_v2(dragon nccl)
  else()
    target_link_libraries_v2(dragon nccl_static)
  endif()
endif()
if (USE_MPI)
  target_link_libraries(dragon ${MPI_LIBRARIES})
  if (USE_SHARED_LIBS)
    target_link_libraries_v2(dragon ${MPI_LIBRARIES_SHARED})
  else()
    target_link_libraries_v2(dragon ${MPI_LIBRARIES_STATIC})
  endif()
endif()
if (WIN32)
  target_link_libraries(dragon_python ${PYTHON_LIBRARIES})
endif()

# ---[ Command - Protobuf
file(GLOB_RECURSE PROTO_FILES
  ${PROJECT_SOURCE_DIR}/python/*.proto
  ${PROJECT_SOURCE_DIR}/../caffe/*.proto)
protobuf_generate_python(${PROTO_FILES})

# ---[ Command - Strip
strip_debug_symbol(dragon)
strip_debug_symbol(dragon_python)

# ---[ Install - Headers
set(_install_dir ${CMAKE_INSTALL_PREFIX}/include)
foreach(_file ${MODULE_INCLUDES})
  get_filename_component(_dir ${_file} DIRECTORY)
  get_filename_component(_ext ${_file} EXT)
  file(RELATIVE_PATH _dir ${PROJECT_SOURCE_DIR} ${_dir})
  file(COPY ${_file} DESTINATION ${_install_dir}/dragon/${_dir})
  if (${_ext} STREQUAL ".pb.h" AND WIN32)
    get_filename_component(_name ${_file} NAME)
    protobuf_remove_constexpr(${_install_dir}/dragon/${_dir}/${_name})
  endif()
endforeach()
file(COPY ${THIRD_PARTY_DIR}/cub/cub DESTINATION ${_install_dir}/cub)
file(COPY ${THIRD_PARTY_DIR}/eigen/Eigen DESTINATION ${_install_dir})
file(COPY ${THIRD_PARTY_DIR}/eigen/unsupported/Eigen DESTINATION ${_install_dir}/unsupported)
file(COPY ${THIRD_PARTY_DIR}/pybind11/include/pybind11 DESTINATION ${_install_dir})
if (EXISTS ${PROTOBUF_SDK_ROOT_DIR}/include/google)
  file(COPY ${PROTOBUF_SDK_ROOT_DIR}/include/google DESTINATION ${_install_dir})
endif()

# ---[ Install - Library
set(_install_dir ${CMAKE_INSTALL_PREFIX}/lib)
install(TARGETS dragon DESTINATION ${_install_dir}/${LIBRARY_INSTALL_PREFIX})
install(TARGETS dragon_python DESTINATION ${_install_dir}/${LIBRARY_INSTALL_PREFIX})
if (MSVC)
  target_get_libraries(_files dragon "protobuf.lib")
  file(COPY ${_files} DESTINATION ${_install_dir})
endif()
